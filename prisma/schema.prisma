// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  content       String      @db.Text
  publishedDate DateTime    @default(now())
  isPublished   Boolean     @default(false)
  author        Author      @relation(fields: [authorId], references: [id])
  authorId      Int
  category      Category?   @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]       @relation("PostToTag")
  postToTag     PostToTag[]
  image         PostImage[]
}

model Author {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  bio    String?
  posts  Post[]
  userId Int
  user   User    @relation(fields: [userId], references: [id])
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  posts     Post[]      @relation("PostToTag")
  PostToTag PostToTag[]
}

model PostToTag {
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])
  postId Int
  tagId  Int

  @@id([postId, tagId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model NewsletterRegistration {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  confirmed Boolean  @default(false)
  uuid      String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

// images for posts stored in amazon s3
model PostImage {
  id         Int      @id @default(autoincrement())
  bucketName String
  key        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
}

// users for authoring posts
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  author    Author[]
}

enum Role {
  USER
  ADMIN
}
